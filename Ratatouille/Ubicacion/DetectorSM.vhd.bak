-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- Generated by Quartus II Version 13.1.0 Build 162 10/23/2013 SJ Web Edition
-- Created on Sat Nov 23 16:57:01 2024

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY DetectorSM IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        Linea : IN STD_LOGIC := '0';
        Valido : OUT STD_LOGIC
    );
END DetectorSM;

ARCHITECTURE BEHAVIOR OF DetectorSM IS
    TYPE type_fstate IS (No_detecta,Espera_Bajo,Detecta,Espera_Alto);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,Linea)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= No_detecta;
            Valido <= '0';
        ELSE
            Valido <= '0';
            CASE fstate IS
                WHEN No_detecta =>
                    IF ((Linea = '0')) THEN
                        reg_fstate <= Espera_Bajo;
                    ELSIF ((Linea = '1')) THEN
                        reg_fstate <= No_detecta;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= No_detecta;
                    END IF;

                    Valido <= '0';
                WHEN Espera_Bajo =>
                    IF ((Linea = '1')) THEN
                        reg_fstate <= No_detecta;
                    ELSIF ((Linea = '0')) THEN
                        reg_fstate <= Detecta;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Espera_Bajo;
                    END IF;

                    Valido <= '0';
                WHEN Detecta =>
                    IF ((Linea = '1')) THEN
                        reg_fstate <= Espera_Alto;
                    ELSIF ((Linea = '0')) THEN
                        reg_fstate <= Detecta;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Detecta;
                    END IF;

                    Valido <= '1';
                WHEN Espera_Alto =>
                    IF ((Linea = '1')) THEN
                        reg_fstate <= No_detecta;
                    ELSIF ((Linea = '0')) THEN
                        reg_fstate <= Detecta;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Espera_Alto;
                    END IF;

                    Valido <= '0';
                WHEN OTHERS => 
                    Valido <= 'X';
                    report "Reach undefined state";
            END CASE;
        END IF;
    END PROCESS;
END BEHAVIOR;
