// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/17/2025 17:23:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Control_Motores
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Control_Motores_vlg_sample_tst(
	ADC_DOUT,
	areset,
	inclk0,
	llego,
	SEL,
	sampler_tx
);
input  ADC_DOUT;
input  areset;
input  inclk0;
input  llego;
input [1:0] SEL;
output sampler_tx;

reg sample;
time current_time;
always @(ADC_DOUT or areset or inclk0 or llego or SEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Control_Motores_vlg_check_tst (
	ADC_CS_N,
	ADC_DIN,
	ADC_SCLK,
	CH0,
	CH1,
	CLK1MHz,
	CLK10KHz,
	clk_40KHz,
	LedIRd,
	LedIRi,
	MD0,
	MD1,
	MI0,
	MI1,
	VELD,
	VELI,
	sampler_rx
);
input  ADC_CS_N;
input  ADC_DIN;
input  ADC_SCLK;
input [11:0] CH0;
input [11:0] CH1;
input  CLK1MHz;
input  CLK10KHz;
input  clk_40KHz;
input  LedIRd;
input  LedIRi;
input  MD0;
input  MD1;
input  MI0;
input  MI1;
input  VELD;
input  VELI;
input sampler_rx;

reg  ADC_CS_N_expected;
reg  ADC_DIN_expected;
reg  ADC_SCLK_expected;
reg [11:0] CH0_expected;
reg [11:0] CH1_expected;
reg  CLK1MHz_expected;
reg  CLK10KHz_expected;
reg  clk_40KHz_expected;
reg  LedIRd_expected;
reg  LedIRi_expected;
reg  MD0_expected;
reg  MD1_expected;
reg  MI0_expected;
reg  MI1_expected;
reg  VELD_expected;
reg  VELI_expected;

reg  ADC_CS_N_prev;
reg  ADC_DIN_prev;
reg  ADC_SCLK_prev;
reg [11:0] CH0_prev;
reg [11:0] CH1_prev;
reg  CLK1MHz_prev;
reg  CLK10KHz_prev;
reg  clk_40KHz_prev;
reg  LedIRd_prev;
reg  LedIRi_prev;
reg  MD0_prev;
reg  MD1_prev;
reg  MI0_prev;
reg  MI1_prev;
reg  VELD_prev;
reg  VELI_prev;

reg  ADC_CS_N_expected_prev;
reg  ADC_DIN_expected_prev;
reg  ADC_SCLK_expected_prev;
reg [11:0] CH0_expected_prev;
reg [11:0] CH1_expected_prev;
reg  CLK1MHz_expected_prev;
reg  CLK10KHz_expected_prev;
reg  clk_40KHz_expected_prev;
reg  LedIRd_expected_prev;
reg  LedIRi_expected_prev;
reg  MD0_expected_prev;
reg  MD1_expected_prev;
reg  MI0_expected_prev;
reg  MI1_expected_prev;
reg  VELD_expected_prev;
reg  VELI_expected_prev;

reg  last_ADC_CS_N_exp;
reg  last_ADC_DIN_exp;
reg  last_ADC_SCLK_exp;
reg [11:0] last_CH0_exp;
reg [11:0] last_CH1_exp;
reg  last_CLK1MHz_exp;
reg  last_CLK10KHz_exp;
reg  last_clk_40KHz_exp;
reg  last_LedIRd_exp;
reg  last_LedIRi_exp;
reg  last_MD0_exp;
reg  last_MD1_exp;
reg  last_MI0_exp;
reg  last_MI1_exp;
reg  last_VELD_exp;
reg  last_VELI_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADC_CS_N_prev = ADC_CS_N;
	ADC_DIN_prev = ADC_DIN;
	ADC_SCLK_prev = ADC_SCLK;
	CH0_prev = CH0;
	CH1_prev = CH1;
	CLK1MHz_prev = CLK1MHz;
	CLK10KHz_prev = CLK10KHz;
	clk_40KHz_prev = clk_40KHz;
	LedIRd_prev = LedIRd;
	LedIRi_prev = LedIRi;
	MD0_prev = MD0;
	MD1_prev = MD1;
	MI0_prev = MI0;
	MI1_prev = MI1;
	VELD_prev = VELD;
	VELI_prev = VELI;
end

// update expected /o prevs

always @(trigger)
begin
	ADC_CS_N_expected_prev = ADC_CS_N_expected;
	ADC_DIN_expected_prev = ADC_DIN_expected;
	ADC_SCLK_expected_prev = ADC_SCLK_expected;
	CH0_expected_prev = CH0_expected;
	CH1_expected_prev = CH1_expected;
	CLK1MHz_expected_prev = CLK1MHz_expected;
	CLK10KHz_expected_prev = CLK10KHz_expected;
	clk_40KHz_expected_prev = clk_40KHz_expected;
	LedIRd_expected_prev = LedIRd_expected;
	LedIRi_expected_prev = LedIRi_expected;
	MD0_expected_prev = MD0_expected;
	MD1_expected_prev = MD1_expected;
	MI0_expected_prev = MI0_expected;
	MI1_expected_prev = MI1_expected;
	VELD_expected_prev = VELD_expected;
	VELI_expected_prev = VELI_expected;
end



// expected CLK1MHz
initial
begin
	CLK1MHz_expected = 1'bX;
	CLK1MHz_expected = #999000 1'b0;
end 

// expected CLK10KHz
initial
begin
	CLK10KHz_expected = 1'bX;
	CLK10KHz_expected = #999000 1'b0;
end 

// expected ADC_CS_N
initial
begin
	ADC_CS_N_expected = 1'bX;
	ADC_CS_N_expected = #999000 1'b0;
end 

// expected ADC_DIN
initial
begin
	ADC_DIN_expected = 1'bX;
	ADC_DIN_expected = #999000 1'b0;
end 

// expected ADC_SCLK
initial
begin
	ADC_SCLK_expected = 1'bX;
	ADC_SCLK_expected = #999000 1'b0;
end 
// expected CH0[ 11 ]
initial
begin
	CH0_expected[11] = 1'bX;
	CH0_expected[11] = #999000 1'b0;
end 
// expected CH0[ 10 ]
initial
begin
	CH0_expected[10] = 1'bX;
	CH0_expected[10] = #999000 1'b0;
end 
// expected CH0[ 9 ]
initial
begin
	CH0_expected[9] = 1'bX;
	CH0_expected[9] = #999000 1'b0;
end 
// expected CH0[ 8 ]
initial
begin
	CH0_expected[8] = 1'bX;
	CH0_expected[8] = #999000 1'b0;
end 
// expected CH0[ 7 ]
initial
begin
	CH0_expected[7] = 1'bX;
	CH0_expected[7] = #999000 1'b0;
end 
// expected CH0[ 6 ]
initial
begin
	CH0_expected[6] = 1'bX;
	CH0_expected[6] = #999000 1'b0;
end 
// expected CH0[ 5 ]
initial
begin
	CH0_expected[5] = 1'bX;
	CH0_expected[5] = #999000 1'b0;
end 
// expected CH0[ 4 ]
initial
begin
	CH0_expected[4] = 1'bX;
	CH0_expected[4] = #999000 1'b0;
end 
// expected CH0[ 3 ]
initial
begin
	CH0_expected[3] = 1'bX;
	CH0_expected[3] = #999000 1'b0;
end 
// expected CH0[ 2 ]
initial
begin
	CH0_expected[2] = 1'bX;
	CH0_expected[2] = #999000 1'b0;
end 
// expected CH0[ 1 ]
initial
begin
	CH0_expected[1] = 1'bX;
	CH0_expected[1] = #999000 1'b0;
end 
// expected CH0[ 0 ]
initial
begin
	CH0_expected[0] = 1'bX;
	CH0_expected[0] = #999000 1'b0;
end 
// expected CH1[ 11 ]
initial
begin
	CH1_expected[11] = 1'bX;
	CH1_expected[11] = #999000 1'b0;
end 
// expected CH1[ 10 ]
initial
begin
	CH1_expected[10] = 1'bX;
	CH1_expected[10] = #999000 1'b0;
end 
// expected CH1[ 9 ]
initial
begin
	CH1_expected[9] = 1'bX;
	CH1_expected[9] = #999000 1'b0;
end 
// expected CH1[ 8 ]
initial
begin
	CH1_expected[8] = 1'bX;
	CH1_expected[8] = #999000 1'b0;
end 
// expected CH1[ 7 ]
initial
begin
	CH1_expected[7] = 1'bX;
	CH1_expected[7] = #999000 1'b0;
end 
// expected CH1[ 6 ]
initial
begin
	CH1_expected[6] = 1'bX;
	CH1_expected[6] = #999000 1'b0;
end 
// expected CH1[ 5 ]
initial
begin
	CH1_expected[5] = 1'bX;
	CH1_expected[5] = #999000 1'b0;
end 
// expected CH1[ 4 ]
initial
begin
	CH1_expected[4] = 1'bX;
	CH1_expected[4] = #999000 1'b0;
end 
// expected CH1[ 3 ]
initial
begin
	CH1_expected[3] = 1'bX;
	CH1_expected[3] = #999000 1'b0;
end 
// expected CH1[ 2 ]
initial
begin
	CH1_expected[2] = 1'bX;
	CH1_expected[2] = #999000 1'b0;
end 
// expected CH1[ 1 ]
initial
begin
	CH1_expected[1] = 1'bX;
	CH1_expected[1] = #999000 1'b0;
end 
// expected CH1[ 0 ]
initial
begin
	CH1_expected[0] = 1'bX;
	CH1_expected[0] = #999000 1'b0;
end 

// expected clk_40KHz
initial
begin
	clk_40KHz_expected = 1'bX;
	clk_40KHz_expected = #999000 1'b0;
end 

// expected LedIRd
initial
begin
	LedIRd_expected = 1'bX;
	LedIRd_expected = #999000 1'b0;
end 

// expected LedIRi
initial
begin
	LedIRi_expected = 1'bX;
	LedIRi_expected = #999000 1'b0;
end 

// expected MD0
initial
begin
	MD0_expected = 1'bX;
	MD0_expected = #999000 1'b0;
end 

// expected MD1
initial
begin
	MD1_expected = 1'bX;
	MD1_expected = #999000 1'b0;
end 

// expected MI0
initial
begin
	MI0_expected = 1'bX;
	MI0_expected = #999000 1'b0;
end 

// expected MI1
initial
begin
	MI1_expected = 1'bX;
	MI1_expected = #999000 1'b0;
end 

// expected VELD
initial
begin
	VELD_expected = 1'bX;
	VELD_expected = #999000 1'b0;
end 

// expected VELI
initial
begin
	VELI_expected = 1'bX;
	VELI_expected = #999000 1'b0;
end 
// generate trigger
always @(ADC_CS_N_expected or ADC_CS_N or ADC_DIN_expected or ADC_DIN or ADC_SCLK_expected or ADC_SCLK or CH0_expected or CH0 or CH1_expected or CH1 or CLK1MHz_expected or CLK1MHz or CLK10KHz_expected or CLK10KHz or clk_40KHz_expected or clk_40KHz or LedIRd_expected or LedIRd or LedIRi_expected or LedIRi or MD0_expected or MD0 or MD1_expected or MD1 or MI0_expected or MI0 or MI1_expected or MI1 or VELD_expected or VELD or VELI_expected or VELI)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADC_CS_N = %b | expected ADC_DIN = %b | expected ADC_SCLK = %b | expected CH0 = %b | expected CH1 = %b | expected CLK1MHz = %b | expected CLK10KHz = %b | expected clk_40KHz = %b | expected LedIRd = %b | expected LedIRi = %b | expected MD0 = %b | expected MD1 = %b | expected MI0 = %b | expected MI1 = %b | expected VELD = %b | expected VELI = %b | ",ADC_CS_N_expected_prev,ADC_DIN_expected_prev,ADC_SCLK_expected_prev,CH0_expected_prev,CH1_expected_prev,CLK1MHz_expected_prev,CLK10KHz_expected_prev,clk_40KHz_expected_prev,LedIRd_expected_prev,LedIRi_expected_prev,MD0_expected_prev,MD1_expected_prev,MI0_expected_prev,MI1_expected_prev,VELD_expected_prev,VELI_expected_prev);
	$display("| real ADC_CS_N = %b | real ADC_DIN = %b | real ADC_SCLK = %b | real CH0 = %b | real CH1 = %b | real CLK1MHz = %b | real CLK10KHz = %b | real clk_40KHz = %b | real LedIRd = %b | real LedIRi = %b | real MD0 = %b | real MD1 = %b | real MI0 = %b | real MI1 = %b | real VELD = %b | real VELI = %b | ",ADC_CS_N_prev,ADC_DIN_prev,ADC_SCLK_prev,CH0_prev,CH1_prev,CLK1MHz_prev,CLK10KHz_prev,clk_40KHz_prev,LedIRd_prev,LedIRi_prev,MD0_prev,MD1_prev,MI0_prev,MI1_prev,VELD_prev,VELI_prev);
`endif
	if (
		( ADC_CS_N_expected_prev !== 1'bx ) && ( ADC_CS_N_prev !== ADC_CS_N_expected_prev )
		&& ((ADC_CS_N_expected_prev !== last_ADC_CS_N_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADC_CS_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADC_CS_N_expected_prev);
		$display ("     Real value = %b", ADC_CS_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADC_CS_N_exp = ADC_CS_N_expected_prev;
	end
	if (
		( ADC_DIN_expected_prev !== 1'bx ) && ( ADC_DIN_prev !== ADC_DIN_expected_prev )
		&& ((ADC_DIN_expected_prev !== last_ADC_DIN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADC_DIN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADC_DIN_expected_prev);
		$display ("     Real value = %b", ADC_DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ADC_DIN_exp = ADC_DIN_expected_prev;
	end
	if (
		( ADC_SCLK_expected_prev !== 1'bx ) && ( ADC_SCLK_prev !== ADC_SCLK_expected_prev )
		&& ((ADC_SCLK_expected_prev !== last_ADC_SCLK_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADC_SCLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADC_SCLK_expected_prev);
		$display ("     Real value = %b", ADC_SCLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ADC_SCLK_exp = ADC_SCLK_expected_prev;
	end
	if (
		( CH0_expected_prev[0] !== 1'bx ) && ( CH0_prev[0] !== CH0_expected_prev[0] )
		&& ((CH0_expected_prev[0] !== last_CH0_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[0] = CH0_expected_prev[0];
	end
	if (
		( CH0_expected_prev[1] !== 1'bx ) && ( CH0_prev[1] !== CH0_expected_prev[1] )
		&& ((CH0_expected_prev[1] !== last_CH0_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[1] = CH0_expected_prev[1];
	end
	if (
		( CH0_expected_prev[2] !== 1'bx ) && ( CH0_prev[2] !== CH0_expected_prev[2] )
		&& ((CH0_expected_prev[2] !== last_CH0_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[2] = CH0_expected_prev[2];
	end
	if (
		( CH0_expected_prev[3] !== 1'bx ) && ( CH0_prev[3] !== CH0_expected_prev[3] )
		&& ((CH0_expected_prev[3] !== last_CH0_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[3] = CH0_expected_prev[3];
	end
	if (
		( CH0_expected_prev[4] !== 1'bx ) && ( CH0_prev[4] !== CH0_expected_prev[4] )
		&& ((CH0_expected_prev[4] !== last_CH0_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[4] = CH0_expected_prev[4];
	end
	if (
		( CH0_expected_prev[5] !== 1'bx ) && ( CH0_prev[5] !== CH0_expected_prev[5] )
		&& ((CH0_expected_prev[5] !== last_CH0_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[5] = CH0_expected_prev[5];
	end
	if (
		( CH0_expected_prev[6] !== 1'bx ) && ( CH0_prev[6] !== CH0_expected_prev[6] )
		&& ((CH0_expected_prev[6] !== last_CH0_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[6] = CH0_expected_prev[6];
	end
	if (
		( CH0_expected_prev[7] !== 1'bx ) && ( CH0_prev[7] !== CH0_expected_prev[7] )
		&& ((CH0_expected_prev[7] !== last_CH0_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[7] = CH0_expected_prev[7];
	end
	if (
		( CH0_expected_prev[8] !== 1'bx ) && ( CH0_prev[8] !== CH0_expected_prev[8] )
		&& ((CH0_expected_prev[8] !== last_CH0_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[8] = CH0_expected_prev[8];
	end
	if (
		( CH0_expected_prev[9] !== 1'bx ) && ( CH0_prev[9] !== CH0_expected_prev[9] )
		&& ((CH0_expected_prev[9] !== last_CH0_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[9] = CH0_expected_prev[9];
	end
	if (
		( CH0_expected_prev[10] !== 1'bx ) && ( CH0_prev[10] !== CH0_expected_prev[10] )
		&& ((CH0_expected_prev[10] !== last_CH0_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[10] = CH0_expected_prev[10];
	end
	if (
		( CH0_expected_prev[11] !== 1'bx ) && ( CH0_prev[11] !== CH0_expected_prev[11] )
		&& ((CH0_expected_prev[11] !== last_CH0_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH0_expected_prev);
		$display ("     Real value = %b", CH0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CH0_exp[11] = CH0_expected_prev[11];
	end
	if (
		( CH1_expected_prev[0] !== 1'bx ) && ( CH1_prev[0] !== CH1_expected_prev[0] )
		&& ((CH1_expected_prev[0] !== last_CH1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[0] = CH1_expected_prev[0];
	end
	if (
		( CH1_expected_prev[1] !== 1'bx ) && ( CH1_prev[1] !== CH1_expected_prev[1] )
		&& ((CH1_expected_prev[1] !== last_CH1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[1] = CH1_expected_prev[1];
	end
	if (
		( CH1_expected_prev[2] !== 1'bx ) && ( CH1_prev[2] !== CH1_expected_prev[2] )
		&& ((CH1_expected_prev[2] !== last_CH1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[2] = CH1_expected_prev[2];
	end
	if (
		( CH1_expected_prev[3] !== 1'bx ) && ( CH1_prev[3] !== CH1_expected_prev[3] )
		&& ((CH1_expected_prev[3] !== last_CH1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[3] = CH1_expected_prev[3];
	end
	if (
		( CH1_expected_prev[4] !== 1'bx ) && ( CH1_prev[4] !== CH1_expected_prev[4] )
		&& ((CH1_expected_prev[4] !== last_CH1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[4] = CH1_expected_prev[4];
	end
	if (
		( CH1_expected_prev[5] !== 1'bx ) && ( CH1_prev[5] !== CH1_expected_prev[5] )
		&& ((CH1_expected_prev[5] !== last_CH1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[5] = CH1_expected_prev[5];
	end
	if (
		( CH1_expected_prev[6] !== 1'bx ) && ( CH1_prev[6] !== CH1_expected_prev[6] )
		&& ((CH1_expected_prev[6] !== last_CH1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[6] = CH1_expected_prev[6];
	end
	if (
		( CH1_expected_prev[7] !== 1'bx ) && ( CH1_prev[7] !== CH1_expected_prev[7] )
		&& ((CH1_expected_prev[7] !== last_CH1_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[7] = CH1_expected_prev[7];
	end
	if (
		( CH1_expected_prev[8] !== 1'bx ) && ( CH1_prev[8] !== CH1_expected_prev[8] )
		&& ((CH1_expected_prev[8] !== last_CH1_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[8] = CH1_expected_prev[8];
	end
	if (
		( CH1_expected_prev[9] !== 1'bx ) && ( CH1_prev[9] !== CH1_expected_prev[9] )
		&& ((CH1_expected_prev[9] !== last_CH1_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[9] = CH1_expected_prev[9];
	end
	if (
		( CH1_expected_prev[10] !== 1'bx ) && ( CH1_prev[10] !== CH1_expected_prev[10] )
		&& ((CH1_expected_prev[10] !== last_CH1_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[10] = CH1_expected_prev[10];
	end
	if (
		( CH1_expected_prev[11] !== 1'bx ) && ( CH1_prev[11] !== CH1_expected_prev[11] )
		&& ((CH1_expected_prev[11] !== last_CH1_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CH1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CH1_expected_prev);
		$display ("     Real value = %b", CH1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CH1_exp[11] = CH1_expected_prev[11];
	end
	if (
		( CLK1MHz_expected_prev !== 1'bx ) && ( CLK1MHz_prev !== CLK1MHz_expected_prev )
		&& ((CLK1MHz_expected_prev !== last_CLK1MHz_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK1MHz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK1MHz_expected_prev);
		$display ("     Real value = %b", CLK1MHz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_CLK1MHz_exp = CLK1MHz_expected_prev;
	end
	if (
		( CLK10KHz_expected_prev !== 1'bx ) && ( CLK10KHz_prev !== CLK10KHz_expected_prev )
		&& ((CLK10KHz_expected_prev !== last_CLK10KHz_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK10KHz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK10KHz_expected_prev);
		$display ("     Real value = %b", CLK10KHz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_CLK10KHz_exp = CLK10KHz_expected_prev;
	end
	if (
		( clk_40KHz_expected_prev !== 1'bx ) && ( clk_40KHz_prev !== clk_40KHz_expected_prev )
		&& ((clk_40KHz_expected_prev !== last_clk_40KHz_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_40KHz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_40KHz_expected_prev);
		$display ("     Real value = %b", clk_40KHz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_clk_40KHz_exp = clk_40KHz_expected_prev;
	end
	if (
		( LedIRd_expected_prev !== 1'bx ) && ( LedIRd_prev !== LedIRd_expected_prev )
		&& ((LedIRd_expected_prev !== last_LedIRd_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LedIRd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LedIRd_expected_prev);
		$display ("     Real value = %b", LedIRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LedIRd_exp = LedIRd_expected_prev;
	end
	if (
		( LedIRi_expected_prev !== 1'bx ) && ( LedIRi_prev !== LedIRi_expected_prev )
		&& ((LedIRi_expected_prev !== last_LedIRi_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LedIRi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LedIRi_expected_prev);
		$display ("     Real value = %b", LedIRi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LedIRi_exp = LedIRi_expected_prev;
	end
	if (
		( MD0_expected_prev !== 1'bx ) && ( MD0_prev !== MD0_expected_prev )
		&& ((MD0_expected_prev !== last_MD0_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD0_expected_prev);
		$display ("     Real value = %b", MD0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_MD0_exp = MD0_expected_prev;
	end
	if (
		( MD1_expected_prev !== 1'bx ) && ( MD1_prev !== MD1_expected_prev )
		&& ((MD1_expected_prev !== last_MD1_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD1_expected_prev);
		$display ("     Real value = %b", MD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MD1_exp = MD1_expected_prev;
	end
	if (
		( MI0_expected_prev !== 1'bx ) && ( MI0_prev !== MI0_expected_prev )
		&& ((MI0_expected_prev !== last_MI0_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MI0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MI0_expected_prev);
		$display ("     Real value = %b", MI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_MI0_exp = MI0_expected_prev;
	end
	if (
		( MI1_expected_prev !== 1'bx ) && ( MI1_prev !== MI1_expected_prev )
		&& ((MI1_expected_prev !== last_MI1_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MI1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MI1_expected_prev);
		$display ("     Real value = %b", MI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_MI1_exp = MI1_expected_prev;
	end
	if (
		( VELD_expected_prev !== 1'bx ) && ( VELD_prev !== VELD_expected_prev )
		&& ((VELD_expected_prev !== last_VELD_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VELD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VELD_expected_prev);
		$display ("     Real value = %b", VELD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_VELD_exp = VELD_expected_prev;
	end
	if (
		( VELI_expected_prev !== 1'bx ) && ( VELI_prev !== VELI_expected_prev )
		&& ((VELI_expected_prev !== last_VELI_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VELI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VELI_expected_prev);
		$display ("     Real value = %b", VELI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_VELI_exp = VELI_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Control_Motores_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADC_DOUT;
reg areset;
reg inclk0;
reg llego;
reg [1:0] SEL;
// wires                                               
wire ADC_CS_N;
wire ADC_DIN;
wire ADC_SCLK;
wire [11:0] CH0;
wire [11:0] CH1;
wire CLK1MHz;
wire CLK10KHz;
wire clk_40KHz;
wire LedIRd;
wire LedIRi;
wire MD0;
wire MD1;
wire MI0;
wire MI1;
wire VELD;
wire VELI;

wire sampler;                             

// assign statements (if any)                          
Control_Motores i1 (
// port map - connection between master ports and signals/registers   
	.ADC_CS_N(ADC_CS_N),
	.ADC_DIN(ADC_DIN),
	.ADC_DOUT(ADC_DOUT),
	.ADC_SCLK(ADC_SCLK),
	.areset(areset),
	.CH0(CH0),
	.CH1(CH1),
	.CLK1MHz(CLK1MHz),
	.CLK10KHz(CLK10KHz),
	.clk_40KHz(clk_40KHz),
	.inclk0(inclk0),
	.LedIRd(LedIRd),
	.LedIRi(LedIRi),
	.llego(llego),
	.MD0(MD0),
	.MD1(MD1),
	.MI0(MI0),
	.MI1(MI1),
	.SEL(SEL),
	.VELD(VELD),
	.VELI(VELI)
);

// inclk0
always
begin
	inclk0 = 1'b0;
	inclk0 = #500 1'b1;
	#500;
end 

// areset
initial
begin
	areset = 1'b1;
	areset = #1280000 1'b0;
end 

// ADC_DOUT
initial
begin
	ADC_DOUT = 1'b0;
end 

// llego
initial
begin
	llego = 1'b0;
end 
// SEL[ 1 ]
initial
begin
	SEL[1] = 1'b0;
end 
// SEL[ 0 ]
initial
begin
	SEL[0] = 1'b0;
end 

Control_Motores_vlg_sample_tst tb_sample (
	.ADC_DOUT(ADC_DOUT),
	.areset(areset),
	.inclk0(inclk0),
	.llego(llego),
	.SEL(SEL),
	.sampler_tx(sampler)
);

Control_Motores_vlg_check_tst tb_out(
	.ADC_CS_N(ADC_CS_N),
	.ADC_DIN(ADC_DIN),
	.ADC_SCLK(ADC_SCLK),
	.CH0(CH0),
	.CH1(CH1),
	.CLK1MHz(CLK1MHz),
	.CLK10KHz(CLK10KHz),
	.clk_40KHz(clk_40KHz),
	.LedIRd(LedIRd),
	.LedIRi(LedIRi),
	.MD0(MD0),
	.MD1(MD1),
	.MI0(MI0),
	.MI1(MI1),
	.VELD(VELD),
	.VELI(VELI),
	.sampler_rx(sampler)
);
endmodule

