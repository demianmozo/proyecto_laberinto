// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2024 01:21:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Matriz_ubicacion
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Matriz_ubicacion_vlg_sample_tst(
	ADC_DOUT,
	CLK,
	Reset1,
	SENSOR_LINEA,
	SENSOR_MURO,
	sampler_tx
);
input  ADC_DOUT;
input  CLK;
input  Reset1;
input  SENSOR_LINEA;
input  SENSOR_MURO;
output sampler_tx;

reg sample;
time current_time;
always @(ADC_DOUT or CLK or Reset1 or SENSOR_LINEA or SENSOR_MURO)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Matriz_ubicacion_vlg_check_tst (
	ADC_CS_N,
	ADC_DIN,
	ADC_SCLK,
	CUENTAA,
	GIROO,
	MD0,
	MD1,
	MI0,
	MI1,
	MUROO,
	pos_act,
	sent_act,
	SENTIDOO,
	VELD,
	VELI,
	sampler_rx
);
input  ADC_CS_N;
input  ADC_DIN;
input  ADC_SCLK;
input  CUENTAA;
input  GIROO;
input  MD0;
input  MD1;
input  MI0;
input  MI1;
input  MUROO;
input [3:0] pos_act;
input [1:0] sent_act;
input  SENTIDOO;
input  VELD;
input  VELI;
input sampler_rx;

reg  ADC_CS_N_expected;
reg  ADC_DIN_expected;
reg  ADC_SCLK_expected;
reg  CUENTAA_expected;
reg  GIROO_expected;
reg  MD0_expected;
reg  MD1_expected;
reg  MI0_expected;
reg  MI1_expected;
reg  MUROO_expected;
reg [3:0] pos_act_expected;
reg [1:0] sent_act_expected;
reg  SENTIDOO_expected;
reg  VELD_expected;
reg  VELI_expected;

reg  ADC_CS_N_prev;
reg  ADC_DIN_prev;
reg  ADC_SCLK_prev;
reg  CUENTAA_prev;
reg  GIROO_prev;
reg  MD0_prev;
reg  MD1_prev;
reg  MI0_prev;
reg  MI1_prev;
reg  MUROO_prev;
reg [3:0] pos_act_prev;
reg [1:0] sent_act_prev;
reg  SENTIDOO_prev;
reg  VELD_prev;
reg  VELI_prev;

reg  CUENTAA_expected_prev;
reg  GIROO_expected_prev;
reg  MD0_expected_prev;
reg  MD1_expected_prev;
reg  MI0_expected_prev;
reg  MI1_expected_prev;
reg  MUROO_expected_prev;
reg [3:0] pos_act_expected_prev;
reg [1:0] sent_act_expected_prev;
reg  SENTIDOO_expected_prev;

reg  last_CUENTAA_exp;
reg  last_GIROO_exp;
reg  last_MD0_exp;
reg  last_MD1_exp;
reg  last_MI0_exp;
reg  last_MI1_exp;
reg  last_MUROO_exp;
reg [3:0] last_pos_act_exp;
reg [1:0] last_sent_act_exp;
reg  last_SENTIDOO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADC_CS_N_prev = ADC_CS_N;
	ADC_DIN_prev = ADC_DIN;
	ADC_SCLK_prev = ADC_SCLK;
	CUENTAA_prev = CUENTAA;
	GIROO_prev = GIROO;
	MD0_prev = MD0;
	MD1_prev = MD1;
	MI0_prev = MI0;
	MI1_prev = MI1;
	MUROO_prev = MUROO;
	pos_act_prev = pos_act;
	sent_act_prev = sent_act;
	SENTIDOO_prev = SENTIDOO;
	VELD_prev = VELD;
	VELI_prev = VELI;
end

// update expected /o prevs

always @(trigger)
begin
	CUENTAA_expected_prev = CUENTAA_expected;
	GIROO_expected_prev = GIROO_expected;
	MD0_expected_prev = MD0_expected;
	MD1_expected_prev = MD1_expected;
	MI0_expected_prev = MI0_expected;
	MI1_expected_prev = MI1_expected;
	MUROO_expected_prev = MUROO_expected;
	pos_act_expected_prev = pos_act_expected;
	sent_act_expected_prev = sent_act_expected;
	SENTIDOO_expected_prev = SENTIDOO_expected;
end



// expected MD0
initial
begin
	MD0_expected = 1'bX;
	MD0_expected = #999000 1'b0;
end 

// expected MD1
initial
begin
	MD1_expected = 1'bX;
	MD1_expected = #999000 1'b0;
end 

// expected MI0
initial
begin
	MI0_expected = 1'bX;
	MI0_expected = #999000 1'b0;
end 

// expected MI1
initial
begin
	MI1_expected = 1'bX;
	MI1_expected = #999000 1'b0;
end 

// expected CUENTAA
initial
begin
	CUENTAA_expected = 1'bX;
end 

// expected GIROO
initial
begin
	GIROO_expected = 1'bX;
end 

// expected MUROO
initial
begin
	MUROO_expected = 1'bX;
end 

// expected SENTIDOO
initial
begin
	SENTIDOO_expected = 1'bX;
end 
// expected pos_act[ 3 ]
initial
begin
	pos_act_expected[3] = 1'bX;
end 
// expected pos_act[ 2 ]
initial
begin
	pos_act_expected[2] = 1'bX;
end 
// expected pos_act[ 1 ]
initial
begin
	pos_act_expected[1] = 1'bX;
end 
// expected pos_act[ 0 ]
initial
begin
	pos_act_expected[0] = 1'bX;
end 
// expected sent_act[ 1 ]
initial
begin
	sent_act_expected[1] = 1'bX;
end 
// expected sent_act[ 0 ]
initial
begin
	sent_act_expected[0] = 1'bX;
end 
// generate trigger
always @(ADC_CS_N_expected or ADC_CS_N or ADC_DIN_expected or ADC_DIN or ADC_SCLK_expected or ADC_SCLK or CUENTAA_expected or CUENTAA or GIROO_expected or GIROO or MD0_expected or MD0 or MD1_expected or MD1 or MI0_expected or MI0 or MI1_expected or MI1 or MUROO_expected or MUROO or pos_act_expected or pos_act or sent_act_expected or sent_act or SENTIDOO_expected or SENTIDOO or VELD_expected or VELD or VELI_expected or VELI)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADC_CS_N = %b | expected ADC_DIN = %b | expected ADC_SCLK = %b | expected CUENTAA = %b | expected GIROO = %b | expected MD0 = %b | expected MD1 = %b | expected MI0 = %b | expected MI1 = %b | expected MUROO = %b | expected pos_act = %b | expected sent_act = %b | expected SENTIDOO = %b | expected VELD = %b | expected VELI = %b | ",ADC_CS_N_expected_prev,ADC_DIN_expected_prev,ADC_SCLK_expected_prev,CUENTAA_expected_prev,GIROO_expected_prev,MD0_expected_prev,MD1_expected_prev,MI0_expected_prev,MI1_expected_prev,MUROO_expected_prev,pos_act_expected_prev,sent_act_expected_prev,SENTIDOO_expected_prev,VELD_expected_prev,VELI_expected_prev);
	$display("| real ADC_CS_N = %b | real ADC_DIN = %b | real ADC_SCLK = %b | real CUENTAA = %b | real GIROO = %b | real MD0 = %b | real MD1 = %b | real MI0 = %b | real MI1 = %b | real MUROO = %b | real pos_act = %b | real sent_act = %b | real SENTIDOO = %b | real VELD = %b | real VELI = %b | ",ADC_CS_N_prev,ADC_DIN_prev,ADC_SCLK_prev,CUENTAA_prev,GIROO_prev,MD0_prev,MD1_prev,MI0_prev,MI1_prev,MUROO_prev,pos_act_prev,sent_act_prev,SENTIDOO_prev,VELD_prev,VELI_prev);
`endif
	if (
		( CUENTAA_expected_prev !== 1'bx ) && ( CUENTAA_prev !== CUENTAA_expected_prev )
		&& ((CUENTAA_expected_prev !== last_CUENTAA_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CUENTAA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CUENTAA_expected_prev);
		$display ("     Real value = %b", CUENTAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CUENTAA_exp = CUENTAA_expected_prev;
	end
	if (
		( GIROO_expected_prev !== 1'bx ) && ( GIROO_prev !== GIROO_expected_prev )
		&& ((GIROO_expected_prev !== last_GIROO_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GIROO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GIROO_expected_prev);
		$display ("     Real value = %b", GIROO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_GIROO_exp = GIROO_expected_prev;
	end
	if (
		( MD0_expected_prev !== 1'bx ) && ( MD0_prev !== MD0_expected_prev )
		&& ((MD0_expected_prev !== last_MD0_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD0_expected_prev);
		$display ("     Real value = %b", MD0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MD0_exp = MD0_expected_prev;
	end
	if (
		( MD1_expected_prev !== 1'bx ) && ( MD1_prev !== MD1_expected_prev )
		&& ((MD1_expected_prev !== last_MD1_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD1_expected_prev);
		$display ("     Real value = %b", MD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MD1_exp = MD1_expected_prev;
	end
	if (
		( MI0_expected_prev !== 1'bx ) && ( MI0_prev !== MI0_expected_prev )
		&& ((MI0_expected_prev !== last_MI0_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MI0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MI0_expected_prev);
		$display ("     Real value = %b", MI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MI0_exp = MI0_expected_prev;
	end
	if (
		( MI1_expected_prev !== 1'bx ) && ( MI1_prev !== MI1_expected_prev )
		&& ((MI1_expected_prev !== last_MI1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MI1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MI1_expected_prev);
		$display ("     Real value = %b", MI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MI1_exp = MI1_expected_prev;
	end
	if (
		( MUROO_expected_prev !== 1'bx ) && ( MUROO_prev !== MUROO_expected_prev )
		&& ((MUROO_expected_prev !== last_MUROO_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MUROO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MUROO_expected_prev);
		$display ("     Real value = %b", MUROO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MUROO_exp = MUROO_expected_prev;
	end
	if (
		( pos_act_expected_prev[0] !== 1'bx ) && ( pos_act_prev[0] !== pos_act_expected_prev[0] )
		&& ((pos_act_expected_prev[0] !== last_pos_act_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pos_act[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pos_act_expected_prev);
		$display ("     Real value = %b", pos_act_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pos_act_exp[0] = pos_act_expected_prev[0];
	end
	if (
		( pos_act_expected_prev[1] !== 1'bx ) && ( pos_act_prev[1] !== pos_act_expected_prev[1] )
		&& ((pos_act_expected_prev[1] !== last_pos_act_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pos_act[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pos_act_expected_prev);
		$display ("     Real value = %b", pos_act_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pos_act_exp[1] = pos_act_expected_prev[1];
	end
	if (
		( pos_act_expected_prev[2] !== 1'bx ) && ( pos_act_prev[2] !== pos_act_expected_prev[2] )
		&& ((pos_act_expected_prev[2] !== last_pos_act_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pos_act[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pos_act_expected_prev);
		$display ("     Real value = %b", pos_act_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pos_act_exp[2] = pos_act_expected_prev[2];
	end
	if (
		( pos_act_expected_prev[3] !== 1'bx ) && ( pos_act_prev[3] !== pos_act_expected_prev[3] )
		&& ((pos_act_expected_prev[3] !== last_pos_act_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pos_act[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pos_act_expected_prev);
		$display ("     Real value = %b", pos_act_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pos_act_exp[3] = pos_act_expected_prev[3];
	end
	if (
		( sent_act_expected_prev[0] !== 1'bx ) && ( sent_act_prev[0] !== sent_act_expected_prev[0] )
		&& ((sent_act_expected_prev[0] !== last_sent_act_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sent_act[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sent_act_expected_prev);
		$display ("     Real value = %b", sent_act_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_sent_act_exp[0] = sent_act_expected_prev[0];
	end
	if (
		( sent_act_expected_prev[1] !== 1'bx ) && ( sent_act_prev[1] !== sent_act_expected_prev[1] )
		&& ((sent_act_expected_prev[1] !== last_sent_act_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sent_act[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sent_act_expected_prev);
		$display ("     Real value = %b", sent_act_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_sent_act_exp[1] = sent_act_expected_prev[1];
	end
	if (
		( SENTIDOO_expected_prev !== 1'bx ) && ( SENTIDOO_prev !== SENTIDOO_expected_prev )
		&& ((SENTIDOO_expected_prev !== last_SENTIDOO_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SENTIDOO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SENTIDOO_expected_prev);
		$display ("     Real value = %b", SENTIDOO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_SENTIDOO_exp = SENTIDOO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Matriz_ubicacion_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADC_DOUT;
reg CLK;
reg Reset1;
reg SENSOR_LINEA;
reg SENSOR_MURO;
// wires                                               
wire ADC_CS_N;
wire ADC_DIN;
wire ADC_SCLK;
wire CUENTAA;
wire GIROO;
wire MD0;
wire MD1;
wire MI0;
wire MI1;
wire MUROO;
wire [3:0] pos_act;
wire [1:0] sent_act;
wire SENTIDOO;
wire VELD;
wire VELI;

wire sampler;                             

// assign statements (if any)                          
Matriz_ubicacion i1 (
// port map - connection between master ports and signals/registers   
	.ADC_CS_N(ADC_CS_N),
	.ADC_DIN(ADC_DIN),
	.ADC_DOUT(ADC_DOUT),
	.ADC_SCLK(ADC_SCLK),
	.CLK(CLK),
	.CUENTAA(CUENTAA),
	.GIROO(GIROO),
	.MD0(MD0),
	.MD1(MD1),
	.MI0(MI0),
	.MI1(MI1),
	.MUROO(MUROO),
	.pos_act(pos_act),
	.Reset1(Reset1),
	.SENSOR_LINEA(SENSOR_LINEA),
	.SENSOR_MURO(SENSOR_MURO),
	.sent_act(sent_act),
	.SENTIDOO(SENTIDOO),
	.VELD(VELD),
	.VELI(VELI)
);

// CLK
initial
begin
	repeat(333)
	begin
		CLK = 1'b0;
		CLK = #15000 1'b1;
		# 15000;
	end
	CLK = 1'b0;
end 

// Reset1
initial
begin
	Reset1 = 1'b0;
	Reset1 = #300000 1'b1;
end 

// SENSOR_LINEA
initial
begin
	SENSOR_LINEA = 1'b0;
	SENSOR_LINEA = #2700000 1'b1;
	# 300000;
	repeat(2)
	begin
		SENSOR_LINEA = 1'b0;
		SENSOR_LINEA = #2700000 1'b1;
		# 300000;
	end
	SENSOR_LINEA = 1'b0;
end 

// SENSOR_MURO
initial
begin
	SENSOR_MURO = 1'b0;
	SENSOR_MURO = #4500000 1'b1;
	SENSOR_MURO = #500000 1'b0;
	SENSOR_MURO = #4500000 1'b1;
end 

Matriz_ubicacion_vlg_sample_tst tb_sample (
	.ADC_DOUT(ADC_DOUT),
	.CLK(CLK),
	.Reset1(Reset1),
	.SENSOR_LINEA(SENSOR_LINEA),
	.SENSOR_MURO(SENSOR_MURO),
	.sampler_tx(sampler)
);

Matriz_ubicacion_vlg_check_tst tb_out(
	.ADC_CS_N(ADC_CS_N),
	.ADC_DIN(ADC_DIN),
	.ADC_SCLK(ADC_SCLK),
	.CUENTAA(CUENTAA),
	.GIROO(GIROO),
	.MD0(MD0),
	.MD1(MD1),
	.MI0(MI0),
	.MI1(MI1),
	.MUROO(MUROO),
	.pos_act(pos_act),
	.sent_act(sent_act),
	.SENTIDOO(SENTIDOO),
	.VELD(VELD),
	.VELI(VELI),
	.sampler_rx(sampler)
);
endmodule

