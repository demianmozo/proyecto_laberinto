// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2024 17:47:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    seleccionadores_mux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module seleccionadores_mux_vlg_sample_tst(
	X,
	sampler_tx
);
input [3:0] X;
output sampler_tx;

reg sample;
time current_time;
always @(X)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module seleccionadores_mux_vlg_check_tst (
	Y1,
	Y2,
	Y3,
	Y4,
	sampler_rx
);
input [3:0] Y1;
input [3:0] Y2;
input [3:0] Y3;
input [3:0] Y4;
input sampler_rx;

reg [3:0] Y1_expected;
reg [3:0] Y2_expected;
reg [3:0] Y3_expected;
reg [3:0] Y4_expected;

reg [3:0] Y1_prev;
reg [3:0] Y2_prev;
reg [3:0] Y3_prev;
reg [3:0] Y4_prev;

reg [3:0] Y1_expected_prev;
reg [3:0] Y2_expected_prev;
reg [3:0] Y3_expected_prev;
reg [3:0] Y4_expected_prev;

reg [3:0] last_Y1_exp;
reg [3:0] last_Y2_exp;
reg [3:0] last_Y3_exp;
reg [3:0] last_Y4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Y1_prev = Y1;
	Y2_prev = Y2;
	Y3_prev = Y3;
	Y4_prev = Y4;
end

// update expected /o prevs

always @(trigger)
begin
	Y1_expected_prev = Y1_expected;
	Y2_expected_prev = Y2_expected;
	Y3_expected_prev = Y3_expected;
	Y4_expected_prev = Y4_expected;
end


// expected Y1[ 3 ]
initial
begin
	Y1_expected[3] = 1'bX;
end 
// expected Y1[ 2 ]
initial
begin
	Y1_expected[2] = 1'bX;
end 
// expected Y1[ 1 ]
initial
begin
	Y1_expected[1] = 1'bX;
end 
// expected Y1[ 0 ]
initial
begin
	Y1_expected[0] = 1'bX;
end 
// expected Y2[ 3 ]
initial
begin
	Y2_expected[3] = 1'bX;
end 
// expected Y2[ 2 ]
initial
begin
	Y2_expected[2] = 1'bX;
end 
// expected Y2[ 1 ]
initial
begin
	Y2_expected[1] = 1'bX;
end 
// expected Y2[ 0 ]
initial
begin
	Y2_expected[0] = 1'bX;
end 
// expected Y3[ 3 ]
initial
begin
	Y3_expected[3] = 1'bX;
end 
// expected Y3[ 2 ]
initial
begin
	Y3_expected[2] = 1'bX;
end 
// expected Y3[ 1 ]
initial
begin
	Y3_expected[1] = 1'bX;
end 
// expected Y3[ 0 ]
initial
begin
	Y3_expected[0] = 1'bX;
end 
// expected Y4[ 3 ]
initial
begin
	Y4_expected[3] = 1'bX;
end 
// expected Y4[ 2 ]
initial
begin
	Y4_expected[2] = 1'bX;
end 
// expected Y4[ 1 ]
initial
begin
	Y4_expected[1] = 1'bX;
end 
// expected Y4[ 0 ]
initial
begin
	Y4_expected[0] = 1'bX;
end 
// generate trigger
always @(Y1_expected or Y1 or Y2_expected or Y2 or Y3_expected or Y3 or Y4_expected or Y4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Y1 = %b | expected Y2 = %b | expected Y3 = %b | expected Y4 = %b | ",Y1_expected_prev,Y2_expected_prev,Y3_expected_prev,Y4_expected_prev);
	$display("| real Y1 = %b | real Y2 = %b | real Y3 = %b | real Y4 = %b | ",Y1_prev,Y2_prev,Y3_prev,Y4_prev);
`endif
	if (
		( Y1_expected_prev[0] !== 1'bx ) && ( Y1_prev[0] !== Y1_expected_prev[0] )
		&& ((Y1_expected_prev[0] !== last_Y1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y1_expected_prev);
		$display ("     Real value = %b", Y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y1_exp[0] = Y1_expected_prev[0];
	end
	if (
		( Y1_expected_prev[1] !== 1'bx ) && ( Y1_prev[1] !== Y1_expected_prev[1] )
		&& ((Y1_expected_prev[1] !== last_Y1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y1_expected_prev);
		$display ("     Real value = %b", Y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y1_exp[1] = Y1_expected_prev[1];
	end
	if (
		( Y1_expected_prev[2] !== 1'bx ) && ( Y1_prev[2] !== Y1_expected_prev[2] )
		&& ((Y1_expected_prev[2] !== last_Y1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y1_expected_prev);
		$display ("     Real value = %b", Y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y1_exp[2] = Y1_expected_prev[2];
	end
	if (
		( Y1_expected_prev[3] !== 1'bx ) && ( Y1_prev[3] !== Y1_expected_prev[3] )
		&& ((Y1_expected_prev[3] !== last_Y1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y1_expected_prev);
		$display ("     Real value = %b", Y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y1_exp[3] = Y1_expected_prev[3];
	end
	if (
		( Y2_expected_prev[0] !== 1'bx ) && ( Y2_prev[0] !== Y2_expected_prev[0] )
		&& ((Y2_expected_prev[0] !== last_Y2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y2_expected_prev);
		$display ("     Real value = %b", Y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Y2_exp[0] = Y2_expected_prev[0];
	end
	if (
		( Y2_expected_prev[1] !== 1'bx ) && ( Y2_prev[1] !== Y2_expected_prev[1] )
		&& ((Y2_expected_prev[1] !== last_Y2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y2_expected_prev);
		$display ("     Real value = %b", Y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Y2_exp[1] = Y2_expected_prev[1];
	end
	if (
		( Y2_expected_prev[2] !== 1'bx ) && ( Y2_prev[2] !== Y2_expected_prev[2] )
		&& ((Y2_expected_prev[2] !== last_Y2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y2_expected_prev);
		$display ("     Real value = %b", Y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Y2_exp[2] = Y2_expected_prev[2];
	end
	if (
		( Y2_expected_prev[3] !== 1'bx ) && ( Y2_prev[3] !== Y2_expected_prev[3] )
		&& ((Y2_expected_prev[3] !== last_Y2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y2_expected_prev);
		$display ("     Real value = %b", Y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Y2_exp[3] = Y2_expected_prev[3];
	end
	if (
		( Y3_expected_prev[0] !== 1'bx ) && ( Y3_prev[0] !== Y3_expected_prev[0] )
		&& ((Y3_expected_prev[0] !== last_Y3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y3_expected_prev);
		$display ("     Real value = %b", Y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y3_exp[0] = Y3_expected_prev[0];
	end
	if (
		( Y3_expected_prev[1] !== 1'bx ) && ( Y3_prev[1] !== Y3_expected_prev[1] )
		&& ((Y3_expected_prev[1] !== last_Y3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y3_expected_prev);
		$display ("     Real value = %b", Y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y3_exp[1] = Y3_expected_prev[1];
	end
	if (
		( Y3_expected_prev[2] !== 1'bx ) && ( Y3_prev[2] !== Y3_expected_prev[2] )
		&& ((Y3_expected_prev[2] !== last_Y3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y3_expected_prev);
		$display ("     Real value = %b", Y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y3_exp[2] = Y3_expected_prev[2];
	end
	if (
		( Y3_expected_prev[3] !== 1'bx ) && ( Y3_prev[3] !== Y3_expected_prev[3] )
		&& ((Y3_expected_prev[3] !== last_Y3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y3_expected_prev);
		$display ("     Real value = %b", Y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y3_exp[3] = Y3_expected_prev[3];
	end
	if (
		( Y4_expected_prev[0] !== 1'bx ) && ( Y4_prev[0] !== Y4_expected_prev[0] )
		&& ((Y4_expected_prev[0] !== last_Y4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y4_expected_prev);
		$display ("     Real value = %b", Y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Y4_exp[0] = Y4_expected_prev[0];
	end
	if (
		( Y4_expected_prev[1] !== 1'bx ) && ( Y4_prev[1] !== Y4_expected_prev[1] )
		&& ((Y4_expected_prev[1] !== last_Y4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y4_expected_prev);
		$display ("     Real value = %b", Y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Y4_exp[1] = Y4_expected_prev[1];
	end
	if (
		( Y4_expected_prev[2] !== 1'bx ) && ( Y4_prev[2] !== Y4_expected_prev[2] )
		&& ((Y4_expected_prev[2] !== last_Y4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y4_expected_prev);
		$display ("     Real value = %b", Y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Y4_exp[2] = Y4_expected_prev[2];
	end
	if (
		( Y4_expected_prev[3] !== 1'bx ) && ( Y4_prev[3] !== Y4_expected_prev[3] )
		&& ((Y4_expected_prev[3] !== last_Y4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y4_expected_prev);
		$display ("     Real value = %b", Y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Y4_exp[3] = Y4_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module seleccionadores_mux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] X;
// wires                                               
wire [3:0] Y1;
wire [3:0] Y2;
wire [3:0] Y3;
wire [3:0] Y4;

wire sampler;                             

// assign statements (if any)                          
seleccionadores_mux i1 (
// port map - connection between master ports and signals/registers   
	.X(X),
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3),
	.Y4(Y4)
);
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b0;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b0;
end 

seleccionadores_mux_vlg_sample_tst tb_sample (
	.X(X),
	.sampler_tx(sampler)
);

seleccionadores_mux_vlg_check_tst tb_out(
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3),
	.Y4(Y4),
	.sampler_rx(sampler)
);
endmodule

